2017-07-11 15:19:12.336 -0600	START		Running Untitled.script
2017-07-11 15:19:12.531 -0600	Log		<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>TypeError: Object of type 'set' is not JSON serializable // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 861336774192,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "zsiVotV5CRpYwleqxGAO";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>builtins.TypeError</h1>\n<div class="detail">\n  <p class="errormsg">TypeError: Object of type 'set' is not JSON serializable</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-861336774304">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1997</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>error = None</pre>\n<pre class="line before"><span class="ws">            </span>ctx.auto_pop(error)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Shortcut for :attr:`wsgi_app`.&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>\n<pre class="line after"><span class="ws">        </span>return '&lt;%s %r&gt;' % (</pre>\n<pre class="line after"><span class="ws">            </span>self.__class__.__name__,</pre>\n<pre class="line after"><span class="ws">            </span>self.name,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336773240">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1985</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336773912">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask_restful\__init__.py"</cite>,\n      line <em class="line">273</em>,\n      in <code class="function">error_router</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception:</pre>\n<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>\n<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>\n<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336773968">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1540</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>\n<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>\n<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>\n<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>\n<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>\n<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class="line after"><span class="ws">            </span>else:</pre>\n<pre class="line after"><span class="ws">                </span>raise e</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>\n<pre class="line after"><span class="ws">        </span>if handler is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774136">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\_compat.py"</cite>,\n      line <em class="line">32</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>from io import StringIO</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">            </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">        </span>raise value</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>else:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774024">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1982</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">        </span>error = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774360">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1614</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>\n<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774416">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask_restful\__init__.py"</cite>,\n      line <em class="line">273</em>,\n      in <code class="function">error_router</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if self._has_fr_route():</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>return self.handle_error(e)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception:</pre>\n<pre class="line before"><span class="ws">                </span>pass  # Fall through to original handler</pre>\n<pre class="line current"><span class="ws">        </span>return original_handler(e)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def handle_error(self, e):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Error handler for the API transforms a raised exception into a Flask</pre>\n<pre class="line after"><span class="ws">        </span>response, with the appropriate HTTP status code and body.</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774248">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1517</em>,\n      in <code class="function">handle_user_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if handler is None:</pre>\n<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>\n<pre class="line after"><span class="ws">        </span>return handler(e)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Default exception handling that kicks in when an exception</pre>\n<pre class="line after"><span class="ws">        </span>occurs that is not caught.  In debug mode the exception will</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774528">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\_compat.py"</cite>,\n      line <em class="line">32</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>from io import StringIO</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">            </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">        </span>raise value</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>else:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774584">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1612</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774472">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask\app.py"</cite>,\n      line <em class="line">1598</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># request came with the OPTIONS method, reply automatically</pre>\n<pre class="line before"><span class="ws">        </span>if getattr(rule, 'provide_automatic_options', False) \</pre>\n<pre class="line before"><span class="ws">           </span>and req.method == 'OPTIONS':</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774696">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask_restful\__init__.py"</cite>,\n      line <em class="line">484</em>,\n      in <code class="function">wrapper</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>def wrapper(*args, **kwargs):</pre>\n<pre class="line before"><span class="ws">            </span>resp = resource(*args, **kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>if isinstance(resp, ResponseBase):  # There may be a better way to test</pre>\n<pre class="line before"><span class="ws">                </span>return resp</pre>\n<pre class="line before"><span class="ws">            </span>data, code, headers = unpack(resp)</pre>\n<pre class="line current"><span class="ws">            </span>return self.make_response(data, code, headers=headers)</pre>\n<pre class="line after"><span class="ws">        </span>return wrapper</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def url_for(self, resource, **values):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Generates a URL to the given resource.</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774640">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask_restful\__init__.py"</cite>,\n      line <em class="line">513</em>,\n      in <code class="function">make_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>default=default_mediatype,</pre>\n<pre class="line before"><span class="ws">        </span>)</pre>\n<pre class="line before"><span class="ws">        </span>if mediatype is None:</pre>\n<pre class="line before"><span class="ws">            </span>raise NotAcceptable()</pre>\n<pre class="line before"><span class="ws">        </span>if mediatype in self.representations:</pre>\n<pre class="line current"><span class="ws">            </span>resp = self.representations[mediatype](data, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>resp.headers['Content-Type'] = mediatype</pre>\n<pre class="line after"><span class="ws">            </span>return resp</pre>\n<pre class="line after"><span class="ws">        </span>elif mediatype == 'text/plain':</pre>\n<pre class="line after"><span class="ws">            </span>resp = original_flask_make_response(str(data), *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>resp.headers['Content-Type'] = 'text/plain'</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774808">\n  <h4>File <cite class="filename">"C:\rest-api\lib\site-packages\flask_restful\representations\json.py"</cite>,\n      line <em class="line">21</em>,\n      in <code class="function">output_json</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>settings.setdefault('indent', 4)</pre>\n<pre class="line before"><span class="ws">        </span>settings.setdefault('sort_keys', not PY3)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span># always end the json dumps with a new line</pre>\n<pre class="line before"><span class="ws">    </span># see https://github.com/mitsuhiko/flask/pull/1262</pre>\n<pre class="line current"><span class="ws">    </span>dumped = dumps(data, **settings) + &quot;\n&quot;</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>resp = make_response(dumped, code)</pre>\n<pre class="line after"><span class="ws">    </span>resp.headers.extend(headers or {})</pre>\n<pre class="line after"><span class="ws">    </span>return resp</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774752">\n  <h4>File <cite class="filename">"c:\python36\Lib\json\__init__.py"</cite>,\n      line <em class="line">238</em>,\n      in <code class="function">dumps</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>cls = JSONEncoder</pre>\n<pre class="line before"><span class="ws">    </span>return cls(</pre>\n<pre class="line before"><span class="ws">        </span>skipkeys=skipkeys, ensure_ascii=ensure_ascii,</pre>\n<pre class="line before"><span class="ws">        </span>check_circular=check_circular, allow_nan=allow_nan, indent=indent,</pre>\n<pre class="line before"><span class="ws">        </span>separators=separators, default=default, sort_keys=sort_keys,</pre>\n<pre class="line current"><span class="ws">        </span>**kw).encode(obj)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774920">\n  <h4>File <cite class="filename">"c:\python36\Lib\json\encoder.py"</cite>,\n      line <em class="line">201</em>,\n      in <code class="function">encode</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># This doesn't pass the iterator directly to ''.join() because the</pre>\n<pre class="line before"><span class="ws">        </span># exceptions aren't as detailed.  The list call should be roughly</pre>\n<pre class="line before"><span class="ws">        </span># equivalent to the PySequence_Fast that ''.join() would do.</pre>\n<pre class="line before"><span class="ws">        </span>chunks = self.iterencode(o, _one_shot=True)</pre>\n<pre class="line before"><span class="ws">        </span>if not isinstance(chunks, (list, tuple)):</pre>\n<pre class="line current"><span class="ws">            </span>chunks = list(chunks)</pre>\n<pre class="line after"><span class="ws">        </span>return ''.join(chunks)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def iterencode(self, o, _one_shot=False):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Encode the given object and yield each string</pre>\n<pre class="line after"><span class="ws">        </span>representation as available.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336774976">\n  <h4>File <cite class="filename">"c:\python36\Lib\json\encoder.py"</cite>,\n      line <em class="line">437</em>,\n      in <code class="function">_iterencode</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if markers is not None:</pre>\n<pre class="line before"><span class="ws">                </span>markerid = id(o)</pre>\n<pre class="line before"><span class="ws">                </span>if markerid in markers:</pre>\n<pre class="line before"><span class="ws">                    </span>raise ValueError(&quot;Circular reference detected&quot;)</pre>\n<pre class="line before"><span class="ws">                </span>markers[markerid] = o</pre>\n<pre class="line current"><span class="ws">            </span>o = _default(o)</pre>\n<pre class="line after"><span class="ws">            </span>yield from _iterencode(o, _current_indent_level)</pre>\n<pre class="line after"><span class="ws">            </span>if markers is not None:</pre>\n<pre class="line after"><span class="ws">                </span>del markers[markerid]</pre>\n<pre class="line after"><span class="ws">    </span>return _iterencode</pre></div>\n</div>\n\n<li><div class="frame" id="frame-861336775032">\n  <h4>File <cite class="filename">"c:\python36\Lib\json\encoder.py"</cite>,\n      line <em class="line">180</em>,\n      in <code class="function">default</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span># Let the base class default method raise the TypeError</pre>\n<pre class="line before"><span class="ws">                </span>return JSONEncoder.default(self, o)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span>raise TypeError(&quot;Object of type '%s' is not JSON serializable&quot; %</pre>\n<pre class="line current"><span class="ws">                        </span>o.__class__.__name__)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def encode(self, o):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Return a JSON string representation of a Python data structure.</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>&gt;&gt;&gt; from json.encoder import JSONEncoder</pre></div>\n</div>\n</ul>\n  <blockquote>TypeError: Object of type 'set' is not JSON serializable</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\rest-api\lib\site-packages\flask_restful\__init__.py&quot;, line 273, in error_router\n    return original_handler(e)\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\rest-api\lib\site-packages\flask\_compat.py&quot;, line 32, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\rest-api\lib\site-packages\flask_restful\__init__.py&quot;, line 273, in error_router\n    return original_handler(e)\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File &quot;C:\rest-api\lib\site-packages\flask\_compat.py&quot;, line 32, in reraise\n    raise value.with_traceback(tb)\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\rest-api\lib\site-packages\flask\app.py&quot;, line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File &quot;C:\rest-api\lib\site-packages\flask_restful\__init__.py&quot;, line 484, in wrapper\n    return self.make_response(data, code, headers=headers)\n  File &quot;C:\rest-api\lib\site-packages\flask_restful\__init__.py&quot;, line 513, in make_response\n    resp = self.representations[mediatype](data, *args, **kwargs)\n  File &quot;C:\rest-api\lib\site-packages\flask_restful\representations\json.py&quot;, line 21, in output_json\n    dumped = dumps(data, **settings) + &quot;\n&quot;\n  File &quot;c:\python36\Lib\json\__init__.py&quot;, line 238, in dumps\n    **kw).encode(obj)\n  File &quot;c:\python36\Lib\json\encoder.py&quot;, line 201, in encode\n    chunks = list(chunks)\n  File &quot;c:\python36\Lib\json\encoder.py&quot;, line 437, in _iterencode\n    o = _default(o)\n  File &quot;c:\python36\Lib\json\encoder.py&quot;, line 180, in default\n    o.__class__.__name__)\nTypeError: Object of type 'set' is not JSON serializable</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1997, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1985, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\rest-api\lib\site-packages\flask_restful\__init__.py", line 273, in error_router\n    return original_handler(e)\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1540, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File "C:\rest-api\lib\site-packages\flask\_compat.py", line 32, in reraise\n    raise value.with_traceback(tb)\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1982, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1614, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\rest-api\lib\site-packages\flask_restful\__init__.py", line 273, in error_router\n    return original_handler(e)\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1517, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File "C:\rest-api\lib\site-packages\flask\_compat.py", line 32, in reraise\n    raise value.with_traceback(tb)\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1612, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\rest-api\lib\site-packages\flask\app.py", line 1598, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File "C:\rest-api\lib\site-packages\flask_restful\__init__.py", line 484, in wrapper\n    return self.make_response(data, code, headers=headers)\n  File "C:\rest-api\lib\site-packages\flask_restful\__init__.py", line 513, in make_response\n    resp = self.representations[mediatype](data, *args, **kwargs)\n  File "C:\rest-api\lib\site-packages\flask_restful\representations\json.py", line 21, in output_json\n    dumped = dumps(data, **settings) + "\n"\n  File "c:\python36\Lib\json\__init__.py", line 238, in dumps\n    **kw).encode(obj)\n  File "c:\python36\Lib\json\encoder.py", line 201, in encode\n    chunks = list(chunks)\n  File "c:\python36\Lib\json\encoder.py", line 437, in _iterencode\n    o = _default(o)\n  File "c:\python36\Lib\json\encoder.py", line 180, in default\n    o.__class__.__name__)\nTypeError: Object of type 'set' is not JSON serializable\n\n-->\n	12	on_untitled	Untitled.script
2017-07-11 15:19:12.848 -0600	EndTestCase		(Duration:"0.51013", Errors:"0", Exceptions:"0", StartTime:"2017-07-11 15:19:12 -0600", Successes:"1", TestCase:"Untitled.script", Warnings:"0")
2017-07-11 15:19:12.905 -0600	SUCCESS		Execution Time 0:00:00 Untitled.script
